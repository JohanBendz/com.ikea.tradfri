'use strict';

const ZigBeeDevice = require('homey-meshdriver').ZigBeeDevice;
const util = require('homey-meshdriver').Util;

const REPORT_DEBOUNCER = 2000;

class GenericRollerBlindDevice extends ZigBeeDevice {
	async onMeshInit() {
		this.enableDebug();

		// Register battery capability and request value update on start
		this.registerCapability('measure_battery', 'genPowerCfg', {
			getOpts: {
				getOnStart: true,
			}
		});

		// Register windowcoverings set capability
		this.registerCapability('windowcoverings_set', 'closuresWindowCovering');

		// This value is set by the system set parser in order to know whether command was sent from Homey
		this._reportDebounceEnabled = false;

		// Register listener for when position changes
		await this.registerAttrReportListener('closuresWindowCovering', 'currentPositionLiftPercentage', 1, 300, 1, currentPositionLiftPercentage => {
			// Convert value
			const windowCoveringsSetValue = util.mapValueRange(0, 100, 1, 0, currentPositionLiftPercentage);

			// If reports are not generated by set command from Homey update directly
			if (!this._reportDebounceEnabled) {
				return this.setCapabilityValue('windowcoverings_set', windowCoveringsSetValue);
			}

			// Else set debounce timeout to prevent capability value updates while moving
			if (this._reportPercentageDebounce) clearTimeout(this._reportPercentageDebounce);
			this._reportPercentageDebounce = setTimeout(() => this._reportDebounceEnabled = false, REPORT_DEBOUNCER);
		});

		// Listen for batter percentage updates
		await this.registerAttrReportListener('genPowerCfg', 'batteryPercentageRemaining', 1, 300, 1, batteryPercentage => {
			if (batteryPercentage <= 200 && batteryPercentage !== 255) return this.setCapabilityValue('measure_battery', Math.round(batteryPercentage / 2));
		})
	}
}

module.exports = GenericRollerBlindDevice;